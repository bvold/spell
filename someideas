Create an unbounded modified SOUNDEX key.  The modification will be that the
first letter will also be coded, and will not be limited to 3 numerics (for
now call it SOUNDEX2).  A ternary trie will be created with SOUNDEX codes
pointing to the real ternary dictionary trie.  The SOUNDEX code nodes will be
lists of words that collate to those locations.  In measuring likelihood of a
match, words will be arranged with first letter first, i.e. if number is 111,
and the word is "and", the "a" words would be first.

When generating lists of possible candidate words, it might be a good idea to
create a "cut-off" where an algorithm stops producing words at a certain
point,say at 15 or 20 words.  If there are not that many words generated,
generate based on the next algorithm up to the total number of boxes checked
in a GUI.  The algorithms would have words generated by creating permutations
of whatever they are good at, trying them against a known set of words, and
passing those that match in the dictionary.

The phonetic algorithm is only effective when you have the word spelled
phonetically correctly (no stray sounds or shifts (no T,O,I,D).  Perhaps create
a key that is based on the ideas of the omission/skeleton key and base it on
phonetic pieces (diphthongs in this work).


